###Com ajuste por co-variável
fit <- lm(Y_C ~ A + X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = m.data,
weights = weights)
vl = coeftest(fit, vcov. = vcovCL, cluster = ~subclass)["A",,drop=FALSE]
estimativas[i] = vl[1]
erros[i] = vl[2]
}
valores  = list(estimativas, erros)
return(valores)
}
a1 = nn.sem_rep.c.a(n = 150)
b1 = nn.sem_rep.c.a(n = 400)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
c1 = nn.sem_rep.c.a(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d1 = nn.sem_rep.c.a(n = 1500)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
tabela2 = gera_tabela(extrai_dados(a1, 2), extrai_dados(b1, 2),
extrai_dados(c1, 2), extrai_dados(d1, 2))
comment(tabela2) =
"Resultados para pareamento NN, sem reposição, na estimativa
do ATT para efeito contínuo, com ajuste por co-variável."
View(tabela2)
View(tabela1)
View(tabela2)
View(tabela1)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
nn.sem_rep.b.or = function(k = 1000, n = 2000){
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN sem reposição
m.out = matchit(A ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = d)
m.data = match.data(m.out)
##Para resultados binários
fit = glm(Y_B ~ A, data = m.data, weights = m.data$weights,
family = binomial(link = "logit"))
####Usando cluster-robust standart error
vl = coeftest(fit, vcov. = vcovCL, cluster = ~ subclass)
estimativas[i] = exp(vl[2])
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
load("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
library(MatchIt)
library(lmtest)
library(sandwich)
#library(boot)
#library(survival)
library(tibble)
rm(a,b,c,d,a1,b1,c1,d1)
d2 = nn.sem_rep.b.or(n = 1500)
tabela3 = gera_tabela(extrai_dados(a2, 2), extrai_dados(b2, 2),
extrai_dados(c2, 2), extrai_dados(d2, 2))
View(tabela3)
tabela3 = gera_tabela(extrai_dados(a2, 2.4), extrai_dados(b2, 2.4),
extrai_dados(c2, 2.4), extrai_dados(d2, 2.4))
View(tabela3)
tabela3 = gera_tabela(extrai_dados(a2, 2.4), extrai_dados(b2, 2.4),
extrai_dados(c2, 2.4), extrai_dados(d2, 2.4))
View(tabela3)
tabela3 = gera_tabela(extrai_dados(a2, 2), extrai_dados(b2, 2),
extrai_dados(c2, 2), extrai_dados(d2, 2))
View(tabela3)
extrai_dados = function(lista, efeito){
ic = mean(ifelse(efeito <= lista[[1]] + lista[[2]]*1.96 &
efeito>= lista[[1]] - lista[[2]]*1.96, 1, 0))
media = mean(lista[[1]])
vies_media = (media-efeito)/media
vies_quadrado = mean((efeito-lista[[1]])^2)
return(round(c(ic, media, vies_media, vies_quadrado),5))
}
tabela3 = gera_tabela(extrai_dados(a2, 2), extrai_dados(b2, 2),
extrai_dados(c2, 2), extrai_dados(d2, 2))
View(tabela3)
extrai_dados = function(lista, efeito){
ic = mean(ifelse(efeito <= lista[[1]] + lista[[2]]*1.96 &
efeito>= lista[[1]] - lista[[2]]*1.96, 1, 0))
media = mean(lista[[1]])
vies_media = (media-efeito)/media
vies_quadrado = mean((efeito-lista[[1]])^2)
return(round(c(ic, media, vies_media, vies_quadrado),5))
}
tabela3 = gera_tabela(extrai_dados(a2, 2.4), extrai_dados(b2, 2.4),
extrai_dados(c2, 2.4), extrai_dados(d2, 2.4))
View(tabela3)
load("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
library(MatchIt)
library(lmtest)
library(sandwich)
c3 = nn.sem_rep.b.rr(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d3 = nn.sem_rep.b.rr(n = 1500)
tabela4 = gera_tabela(extrai_dados.or(a3, 1.54), extrai_dados.or(b3, 1.54),
extrai_dados.or(c3, 1.54), extrai_dados.or(d3, 1.54))
#library(boot)
#library(survival)
library(tibble)
tabela4 = gera_tabela(extrai_dados.or(a3, 1.54), extrai_dados.or(b3, 1.54),
extrai_dados.or(c3, 1.54), extrai_dados.or(d3, 1.54))
View(tabela4)
comment(tabela3) =
"Resultados para pareamento NN, sem reposição, na estimativa
do ATT para efeito binário marginal, sem ajuste por co-variável,
na escala do OR."
comment(tabela4) =
"Resultados para pareamento NN, sem reposição, na estimativa
do ATT para efeito binário marginal, sem ajuste por co-variável,
na escala do RR."
comment(tabela3)
comment(tabela2)
library(MatchIt)
library(lmtest)
library(sandwich)
d4 = nn.sem_rep.b.rd(n = 1500)
tabela5 = gera_tabela(extrai_dados(a4, .144), extrai_dados(b4, .144),
extrai_dados(c4, .144), extrai_dados(d4, .144))
#library(boot)
#library(survival)
library(tibble)
tabela5 = gera_tabela(extrai_dados(a4, .144), extrai_dados(b4, .144),
extrai_dados(c4, .144), extrai_dados(d4, .144))
comment(tabela2) =
"Resultados para pareamento NN, sem reposição, na estimativa
do ATT para efeito binário, sem ajuste por co-variável, na escala do RD."
View(tabela5)
comment(tabela2) =
"Resultados para pareamento NN, sem reposição, na estimativa
do ATT para efeito contínuo, com ajuste por co-variável."
comment(tabela5) =
"Resultados para pareamento NN, sem reposição, na estimativa
do ATT para efeito binário, sem ajuste por co-variável, na escala do RD."
#NN com reposição
mNNr = matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
link = "linear.logit",
ratio = 3, replace = TRUE)
library(MatchIt)
library(lmtest)
library(sandwich)
#library(boot)
#library(survival)
library(tibble)
#NN com reposição
mNNr = matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
link = "linear.logit",
ratio = 3, replace = TRUE)
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
X = gen_X(1000)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN com reposição
mNNr = matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
link = "linear.logit",
ratio = 3, replace = TRUE)
mNNr
m.data = match.data(mNNr)
m.data
fit1md <- lm(Y_C ~ A, data = m.data, weights = weights)
coeftest(fit1md, vcov. = vcovHC)
nn.sem_rep.c = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = match.data(mNNr)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A, data = m.data, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
#NN sem reposição com efeito contínuo sem ajuste por co-variável.
nn.sem_rep.c = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN sem reposição
m.out = matchit(A ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = d)
#m.out
m.data = match.data(m.out)
#head(m.data)
##Para resultados contínuos
###sem ajuste por covariável
fit = lm(Y_C ~ A, data = m.data, weights = m.data$weights)
####Usando cluster-robust standart error
vl = coeftest(fit, vcov. = vcovCL, cluster = ~ subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
#NN sem reposição com efeito contínuo com ajuste por co-variável.
nn.sem_rep.c.a = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN sem reposição
m.out = matchit(A ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = d)
#m.out
m.data = match.data(m.out)
#head(m.data)
##Para resultados contínuos
###Com ajuste por co-variável
fit <- lm(Y_C ~ A + X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = m.data,
weights = weights)
vl = coeftest(fit, vcov. = vcovCL, cluster = ~subclass)["A",,drop=FALSE]
estimativas[i] = vl[1]
erros[i] = vl[2]
}
valores  = list(estimativas, erros)
return(valores)
}
nn.sem_rep.b.or = function(k = 1000, n = 2000){
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN sem reposição
m.out = matchit(A ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = d)
m.data = match.data(m.out)
##Para resultados binários
fit = glm(Y_B ~ A, data = m.data, weights = m.data$weights,
family = binomial(link = "logit"))
####Usando cluster-robust standart error
vl = coeftest(fit, vcov. = vcovCL, cluster = ~ subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
nn.sem_rep.b.rr = function(k = 1000, n = 2000){
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN sem reposição
m.out = matchit(A ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = d)
m.data = match.data(m.out)
##Para resultados binários
fit = glm(Y_B ~ A, data = m.data, weights = m.data$weights,
family = binomial(link = "log"))
####Usando cluster-robust standart error
vl = coeftest(fit, vcov. = vcovCL, cluster = ~ subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
nn.sem_rep.b.rd = function(k = 1000, n = 2000){
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN sem reposição
m.out = matchit(A ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = d)
m.data = match.data(m.out)
##Para resultados binários
fit = glm(Y_B ~ A, data = m.data, weights = m.data$weights,
family = binomial(link = "identity"))
####Usando cluster-robust standart error
vl = coeftest(fit, vcov. = vcovCL, cluster = ~ subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
nn.com_rep.c = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = match.data(mNNr)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A, data = m.data, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a = nn.com_rep.c(n = 150)
View(a)
View(tabela1)
b = nn.com_rep.c(n = 400)
c = nn.com_rep.c(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d = nn.com_rep.c(n = 1500)
#-----------------------------------------------------------------------------#
tabela6 = gera_tabela(extrai_dados(a, 2), extrai_dados(b, 2),
extrai_dados(c, 2), extrai_dados(d, 2))
comment(tabela6) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito contínuo, sem ajuste por co-variável."
View(tabela6)
rm(X, A, Y_B, Y_C, a, b, c, d)
rm(a4,b4,c4,d4)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
##NN com reposição com efeito contínuo com ajuste por co-variável.
nn.com_rep.c.a = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = get_matches(mNNr)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A + X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = m.data, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a1 = nn.com_rep.c.a(n = 150)
b1 = nn.com_rep.c.a(n = 400)
c1 = nn.com_rep.c.a(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d1 = nn.com_rep.c.a(n = 1500)
tabela7 = gera_tabela(extrai_dados(a1, 2), extrai_dados(b1, 2),
extrai_dados(c1, 2), extrai_dados(d1, 2))
comment(tabela2) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito contínuo, com ajuste por co-variável."
View(tabela7)
nn.com_rep.b.rd = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = get_matches(mNNr)
##Para resultados binários
###sem ajuste por covariável
fit1md <- glm(Y_B ~ A, data = m.data, weights = weights,
family = quasibinomial("identity"))
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~ subclass + id)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
library(MatchIt)
library(lmtest)
library(sandwich)
#library(boot)
#library(survival)
library(tibble)
d3 = nn.com_rep.b.rr(n = 1500)
tabela9 = gera_tabela(extrai_dados.or(a3, 1.54), extrai_dados.or(b3, 1.54),
extrai_dados.or(c3, 1.54), extrai_dados.or(d3, 1.54))
comment(tabela4) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito binário marginal, sem ajuste por co-variável,
na escala do RR."
View(tabela9)
rm(a2,b2,c2,d2,a3,c3,b3,d3)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
nn.com_rep.b.rd = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = get_matches(mNNr)
##Para resultados binários
###sem ajuste por covariável
fit1md <- glm(Y_B ~ A, data = m.data, weights = weights,
family = quasibinomial("identity"))
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~ subclass + id)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a4 = nn.com_rep.b.rd(n = 150)
b4 = nn.com_rep.b.rd(n = 400)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
c4 = nn.com_rep.b.rd(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d4 = nn.com_rep.b.rd(n = 1500)
tabela10 = gera_tabela(extrai_dados(a4, .144), extrai_dados(b4, .144),
extrai_dados(c4, .144), extrai_dados(d4, .144))
comment(tabela10) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito binário, sem ajuste por co-variável, na escala do RD."
View(tabela10)
View(tabela9)
View(tabela8)
