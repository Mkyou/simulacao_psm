}
nn.sem_rep.b.rd = function(k = 1000, n = 2000){
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
#NN sem reposição
m.out = matchit(A ~ X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9,
data = d)
m.data = match.data(m.out)
##Para resultados binários
fit = glm(Y_B ~ A, data = m.data, weights = m.data$weights,
family = binomial(link = "identity"))
####Usando cluster-robust standart error
vl = coeftest(fit, vcov. = vcovCL, cluster = ~ subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
nn.com_rep.c = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = match.data(mNNr)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A, data = m.data, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a = nn.com_rep.c(n = 150)
View(a)
View(tabela1)
b = nn.com_rep.c(n = 400)
c = nn.com_rep.c(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d = nn.com_rep.c(n = 1500)
#-----------------------------------------------------------------------------#
tabela6 = gera_tabela(extrai_dados(a, 2), extrai_dados(b, 2),
extrai_dados(c, 2), extrai_dados(d, 2))
comment(tabela6) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito contínuo, sem ajuste por co-variável."
View(tabela6)
rm(X, A, Y_B, Y_C, a, b, c, d)
rm(a4,b4,c4,d4)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
##NN com reposição com efeito contínuo com ajuste por co-variável.
nn.com_rep.c.a = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = get_matches(mNNr)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A + X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = m.data, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a1 = nn.com_rep.c.a(n = 150)
b1 = nn.com_rep.c.a(n = 400)
c1 = nn.com_rep.c.a(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d1 = nn.com_rep.c.a(n = 1500)
tabela7 = gera_tabela(extrai_dados(a1, 2), extrai_dados(b1, 2),
extrai_dados(c1, 2), extrai_dados(d1, 2))
comment(tabela2) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito contínuo, com ajuste por co-variável."
View(tabela7)
nn.com_rep.b.rd = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = get_matches(mNNr)
##Para resultados binários
###sem ajuste por covariável
fit1md <- glm(Y_B ~ A, data = m.data, weights = weights,
family = quasibinomial("identity"))
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~ subclass + id)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
library(MatchIt)
library(lmtest)
library(sandwich)
#library(boot)
#library(survival)
library(tibble)
d3 = nn.com_rep.b.rr(n = 1500)
tabela9 = gera_tabela(extrai_dados.or(a3, 1.54), extrai_dados.or(b3, 1.54),
extrai_dados.or(c3, 1.54), extrai_dados.or(d3, 1.54))
comment(tabela4) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito binário marginal, sem ajuste por co-variável,
na escala do RR."
View(tabela9)
rm(a2,b2,c2,d2,a3,c3,b3,d3)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
nn.com_rep.b.rd = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mNNr = matchit(
A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9,
data = d,
link = "linear.logit",
ratio = 3,
replace = TRUE
)
m.data = get_matches(mNNr)
##Para resultados binários
###sem ajuste por covariável
fit1md <- glm(Y_B ~ A, data = m.data, weights = weights,
family = quasibinomial("identity"))
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~ subclass + id)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a4 = nn.com_rep.b.rd(n = 150)
b4 = nn.com_rep.b.rd(n = 400)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
c4 = nn.com_rep.b.rd(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d4 = nn.com_rep.b.rd(n = 1500)
tabela10 = gera_tabela(extrai_dados(a4, .144), extrai_dados(b4, .144),
extrai_dados(c4, .144), extrai_dados(d4, .144))
comment(tabela10) =
"Resultados para pareamento NN, com reposição, na estimativa
do ATT para efeito binário, sem ajuste por co-variável, na escala do RD."
View(tabela10)
View(tabela9)
View(tabela8)
library(MatchIt)
library(lmtest)
library(sandwich)
#Fullmatchig, efeitos contínuos, sem ajuste por co-variável.
fullmm.c = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mF <- matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
method = "full", estimand = "ATT")
m.data = match.data(mF)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A, data = m.data, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
rm(a4,b4,c4,d4)
a = nn.com_rep.c(n = 150)
a = fullmm.c(n = 150)
install.packages("optmatch")
#library(boot)
#library(survival)
library(optmatch)
#Fullmatchig, efeitos contínuos, sem ajuste por co-variável.
fullmm.c = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mF <- matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
method = "full", estimand = "ATT")
m.data = match.data(mF)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A, data = m.data, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a = fullmm.c(n = 150)
b = fullmm.c(n = 400)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
c = fullmm.c(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d = fullmm.c(n = 1500)
#-----------------------------------------------------------------------------#
tabela11 = gera_tabela(extrai_dados(a, 2), extrai_dados(b, 2),
extrai_dados(c, 2), extrai_dados(d, 2))
library(tibble)
#-----------------------------------------------------------------------------#
tabela11 = gera_tabela(extrai_dados(a, 2), extrai_dados(b, 2),
extrai_dados(c, 2), extrai_dados(d, 2))
comment(tabela1) =
"Resultados para Fullmatch, na estimativa
do ATT para efeito contínuo, sem ajuste por co-variável.
View(tabela11)
View(tabela11)
View(tabela10)
View(tabela11)
view(tabela11)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
fullmm.c.a = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mF <- matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
method = "full", estimand = "ATT")
m.data = match.data(mF)
covs_to_center = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9")
md.cen = m.data
md.cen[covs_to_center] = scale(md.cen[covs_to_center], scale = FALSE)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A * (X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9),
data = md.cen, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~subclass)[1:2,]
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
#Fullmatching, efeitos contínuos, com ajuste por co-variável.
fullmm.c.a = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mF <- matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
method = "full", estimand = "ATT")
m.data = match.data(mF)
covs_to_center = c("X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9")
md.cen = m.data
md.cen[covs_to_center] = scale(md.cen[covs_to_center], scale = FALSE)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- lm(Y_C ~ A * (X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9),
data = md.cen, weights = weights)
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~subclass)[1:2,]
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a1 = fullmm.c.a(n = 150)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
b1 = fullmm.c.a(n = 400)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
c1 = fullmm.c.a(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d1 = fullmm.c.a(n = 1500)
comment(tabela11) =
"Resultados para Fullmatch, na estimativa
do ATT para efeito contínuo, sem ajuste por co-variável."
tabela12 = gera_tabela(extrai_dados(a1, 2), extrai_dados(b1, 2),
extrai_dados(c1, 2), extrai_dados(d1, 2))
comment(tabela12) =
"Resultados para Fullmatch, na estimativa
do ATT para efeito contínuo, sem ajuste por co-variável."
comment(tabela1) =
"Resultados para pareamento NN, sem reposição, na estimativa
do ATT para efeito contínuo, sem ajuste por co-variável."
View(tabela12)
fullmm.b.or = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mF <- matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
method = "full", estimand = "ATT")
m.data = match.data(mF)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- glm(Y_B ~ A, data = m.data, weights = weights,
family = quasibinomial(link = "logit"))
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
a2 = fullmm.b.or(n = 150)
library(MatchIt)
library(lmtest)
library(sandwich)
#library(boot)
#library(survival)
library(optmatch)
a2 = fullmm.b.or(n = 150)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
b2 = fullmm.b.or(n = 400)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
c2 = fullmm.b.or(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d2 = fullmm.b.or(n = 1500)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
tabela13 = gera_tabela(extrai_dados.or(a2, 1.92), extrai_dados.or(b2, 1.92),
extrai_dados.or(c2, 1.92), extrai_dados.or(d2, 1.92))
comment(tabela13) =
"Resultados para Fullmatch, na estimativa
do ATT para efeito binário marginal, sem ajuste por co-variável,
na escala do OR."
extrai_dados = function(lista, efeito){
ic = mean(ifelse(efeito <= lista[[1]] + lista[[2]]*1.96 &
efeito>= lista[[1]] - lista[[2]]*1.96, 1, 0))
media = mean(lista[[1]])
vies_media = (media-efeito)/media
vies_quadrado = mean((efeito-lista[[1]])^2)
return(round(c(ic, media, vies_media, vies_quadrado),5))
}
extrai_dados.or = function(lista, efeito){
ic = mean(ifelse(efeito <= exp(lista[[1]] + lista[[2]]*1.96) &
efeito >= exp(lista[[1]] - lista[[2]]*1.96), 1, 0))
media = mean(exp(lista[[1]]))
vies_media = (media-efeito)/media
vies_quadrado = mean((efeito-exp(lista[[1]]))^2)
return(round(c(ic, media, vies_media, vies_quadrado),5))
}
gera_tabela = function(a, b, c, d){
tabela = as_tibble(data.frame(
N = c(150, 400, 800, 1500),
x_barra = c(a[[2]], b[[2]], c[[2]], d[[2]]),
v_x_barra = c(a[[3]], b[[3]], c[[3]], d[[3]]),
ics = c(a[[1]], b[[1]], c[[1]], d[[1]]),
v_q_medio = c(a[[4]], b[[4]], c[[4]], d[[4]])
))
return(tabela)
}
#library(boot)
#library(survival)
library(tibble)
tabela13 = gera_tabela(extrai_dados.or(a2, 1.92), extrai_dados.or(b2, 1.92),
extrai_dados.or(c2, 1.92), extrai_dados.or(d2, 1.92))
comment(tabela13) =
"Resultados para Fullmatch, na estimativa
do ATT para efeito binário marginal, sem ajuste por co-variável,
na escala do OR."
View(tabela13)
fullmm.b.rr = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mF <- matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
method = "full", estimand = "ATT")
m.data = match.data(mF)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- glm(Y_B ~ A, data = m.data, weights = weights,
family = quasibinomial(link = "log"))
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
#Fullmatching, efeitos binários, sem ajuste por co-variável, na escala RR.
fullmm.b.rr = function(k = 1000, n = 2000) {
estimativas = c()
erros = c()
for (i in 1:k) {
X = gen_X(n)
A = gen_A(X)
Y_C = gen_Y_C(A, X)
Y_B = gen_Y_B(A, X)
d = data.frame(A, X, Y_C, Y_B)
mF <- matchit(A ~ X1 + X2 + X3 + X4 + X5 +
X6 + X7 + X8 + X9, data = d,
method = "full", estimand = "ATT")
m.data = match.data(mF)
##Para resultados contínuos
###sem ajuste por covariável
fit1md <- glm(Y_B ~ A, data = m.data, weights = weights,
family = quasibinomial(link = "log"))
####Usando cluster-robust standart error
vl = coeftest(fit1md, vcov. = vcovHC, cluster = ~subclass)
estimativas[i] = vl[2]
erros[i] = vl[4]
}
valores  = list(estimativas, erros)
return(valores)
}
a3 = fullmm.b.rr(n = 150)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
b3 = fullmm.b.rr(n = 400)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
c3 = fullmm.b.rr(n = 800)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
d3 = fullmm.b.rr(n = 1500)
save.image("C:/Users/moise/Google Drive/UFBA/PIBIC/Simulação/simulacao_psm/.RData")
tabela14 = gera_tabela(extrai_dados.or(a3, 1.54), extrai_dados.or(b3, 1.54),
extrai_dados.or(c3, 1.54), extrai_dados.or(d3, 1.54))
comment(tabela14) =
"Resultados para Fullmatch, na estimativa
do ATT para efeito binário marginal, sem ajuste por co-variável,
na escala do RR."
View(tabela14)
